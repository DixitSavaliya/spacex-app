{"ast":null,"code":"import _objectSpread from \"/var/www/html/spacex-feed-app/client/node_modules/@babel/runtime/helpers/esm/objectSpread\";\n// import { config } from '../config.js';\n// export default {\n//     // /** Twitter Launches Spacex */\n//     // getTwitterLaunches: () => {\n//     //     return this.\n//     //     // return fetch(config.baseConfig + \"twitter-tweets\")\n//     //     //     .then(res => res.json())\n//     //     //     .catch({ status: 500, message: 'Internal Server Error' });\n//     // },\n//     /** Twitters Launches Spacex */\n//     getTwittersLaunches: () => {\n//         return fetch(config.baseConfig + \"twitter-tweet\")\n//             .then(res => res.json())\n//             .catch({ status: 500, message: 'Internal Server Error' });\n//     }\n// }\nexport const fetchUser = async () => {\n  const oauths = _objectSpread({}, OAUTHS, {\n    oauth_nonce: generateNonce(),\n    oauth_timestamp: Math.floor(Date.now() / 1000)\n  });\n\n  const oauthKeys = Object.keys(oauths);\n  const oauthValues = Object.values(oauths);\n  const baseUrl = \"\".concat(ROOT_API_URL, \"verify_credentials.json\");\n  const signature = generateOauthSignature(oauths, HTTP_GET, baseUrl, CONSUMER_SECRET, OAUTH_SECRET);\n  const response = await fetch(baseUrl, {\n    method: \"\".concat(HTTP_GET),\n    mode: 'cors',\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n      'Authorization': \"OAuth \".concat(oauthKeys[0], \"=\\\"\").concat(oauthValues[0], \"\\\",\").concat(oauthKeys[1], \"=\\\"\").concat(oauthValues[1], \"\\\",oauth_signature=\\\"\").concat(signature, \"\\\",\").concat(oauthKeys[2], \"=\\\"\").concat(oauthValues[2], \"\\\",\").concat(oauthKeys[3], \"=\\\"\").concat(oauthValues[3], \"\\\",\").concat(oauthKeys[4], \"=\\\"\").concat(oauthValues[4], \"\\\",\").concat(oauthKeys[5], \"=\\\"\").concat(oauthValues[5], \"\\\"\")\n    }\n  });\n  const body = await response.json();\n  console.log(\"response\", body);\n  if (response.status !== 200) throw Error(body.message);\n  return body;\n};","map":{"version":3,"sources":["/var/www/html/spacex-feed-app/client/src/service/twitter.service.js"],"names":["fetchUser","oauths","OAUTHS","oauth_nonce","generateNonce","oauth_timestamp","Math","floor","Date","now","oauthKeys","Object","keys","oauthValues","values","baseUrl","ROOT_API_URL","signature","generateOauthSignature","HTTP_GET","CONSUMER_SECRET","OAUTH_SECRET","response","fetch","method","mode","headers","body","json","console","log","status","Error","message"],"mappings":";AAAA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA,OAAO,MAAMA,SAAS,GAAG,YAAY;AACjC,QAAMC,MAAM,qBAAOC,MAAP;AAAeC,IAAAA,WAAW,EAAEC,aAAa,EAAzC;AAA6CC,IAAAA,eAAe,EAAEC,IAAI,CAACC,KAAL,CAAWC,IAAI,CAACC,GAAL,KAAa,IAAxB;AAA9D,IAAZ;;AACA,QAAMC,SAAS,GAAGC,MAAM,CAACC,IAAP,CAAYX,MAAZ,CAAlB;AACA,QAAMY,WAAW,GAAGF,MAAM,CAACG,MAAP,CAAcb,MAAd,CAApB;AACA,QAAMc,OAAO,aAAMC,YAAN,4BAAb;AACA,QAAMC,SAAS,GAAGC,sBAAsB,CACtCjB,MADsC,EAEtCkB,QAFsC,EAGtCJ,OAHsC,EAItCK,eAJsC,EAKtCC,YALsC,CAAxC;AAOA,QAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACR,OAAD,EAAU;AAClCS,IAAAA,MAAM,YAAKL,QAAL,CAD4B;AAElCM,IAAAA,IAAI,EAAE,MAF4B;AAGlCC,IAAAA,OAAO,EAAE;AACP,sBAAgB,mCADT;AAEP,uCAA0BhB,SAAS,CAAC,CAAD,CAAnC,gBAA2CG,WAAW,CAAC,CAAD,CAAtD,gBAA8DH,SAAS,CAAC,CAAD,CAAvE,gBAA+EG,WAAW,CAAC,CAAD,CAA1F,kCAAmHI,SAAnH,gBAAiIP,SAAS,CAAC,CAAD,CAA1I,gBAAkJG,WAAW,CAAC,CAAD,CAA7J,gBAAqKH,SAAS,CAAC,CAAD,CAA9K,gBAAsLG,WAAW,CAAC,CAAD,CAAjM,gBAAyMH,SAAS,CAAC,CAAD,CAAlN,gBAA0NG,WAAW,CAAC,CAAD,CAArO,gBAA6OH,SAAS,CAAC,CAAD,CAAtP,gBAA8PG,WAAW,CAAC,CAAD,CAAzQ;AAFO;AAHyB,GAAV,CAA5B;AAQC,QAAMc,IAAI,GAAG,MAAML,QAAQ,CAACM,IAAT,EAAnB;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAuBH,IAAvB;AAED,MAAIL,QAAQ,CAACS,MAAT,KAAoB,GAAxB,EACE,MAAMC,KAAK,CAACL,IAAI,CAACM,OAAN,CAAX;AAEF,SAAON,IAAP;AACD,CA3BI","sourcesContent":["// import { config } from '../config.js';\n\n\n// export default {\n\n//     // /** Twitter Launches Spacex */\n//     // getTwitterLaunches: () => {\n//     //     return this.\n//     //     // return fetch(config.baseConfig + \"twitter-tweets\")\n//     //     //     .then(res => res.json())\n//     //     //     .catch({ status: 500, message: 'Internal Server Error' });\n//     // },\n\n//     /** Twitters Launches Spacex */\n//     getTwittersLaunches: () => {\n//         return fetch(config.baseConfig + \"twitter-tweet\")\n//             .then(res => res.json())\n//             .catch({ status: 500, message: 'Internal Server Error' });\n//     }\n\n// }\n\nexport const fetchUser = async () => {\n    const oauths = {...OAUTHS, oauth_nonce: generateNonce(), oauth_timestamp: Math.floor(Date.now() / 1000)};\n    const oauthKeys = Object.keys(oauths);\n    const oauthValues = Object.values(oauths);\n    const baseUrl = `${ROOT_API_URL}verify_credentials.json`;\n    const signature = generateOauthSignature(\n      oauths,\n      HTTP_GET,\n      baseUrl,\n      CONSUMER_SECRET,\n      OAUTH_SECRET\n    );\n    const response = await fetch(baseUrl, {\n        method: `${HTTP_GET}`,\n        mode: 'cors',\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded',\n          'Authorization': `OAuth ${oauthKeys[0]}=\"${oauthValues[0]}\",${oauthKeys[1]}=\"${oauthValues[1]}\",oauth_signature=\"${signature}\",${oauthKeys[2]}=\"${oauthValues[2]}\",${oauthKeys[3]}=\"${oauthValues[3]}\",${oauthKeys[4]}=\"${oauthValues[4]}\",${oauthKeys[5]}=\"${oauthValues[5]}\"`,\n      }\n     } );\n     const body = await response.json();\n     console.log(\"response\",body);\n  \n    if (response.status !== 200) \n      throw Error(body.message);\n  \n    return body;\n  }"]},"metadata":{},"sourceType":"module"}