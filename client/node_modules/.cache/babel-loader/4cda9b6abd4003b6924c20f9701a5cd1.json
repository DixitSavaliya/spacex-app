{"ast":null,"code":"/*\n Twitter client app\n */\nvar OAuth = require('oauth').OAuth;\n\nvar qs = require('qs');\n\nfunction Twitter(config) {\n  this.consumerKey = config.consumerKey;\n  this.consumerSecret = config.consumerSecret;\n  this.accessToken = config.accessToken;\n  this.accessTokenSecret = config.accessTokenSecret;\n  this.callBackUrl = config.callBackUrl;\n  this.baseUrl = 'https://api.twitter.com/1.1';\n  this.oauth = new OAuth('https://api.twitter.com/oauth/request_token', 'https://api.twitter.com/oauth/access_token', this.consumerKey, this.consumerSecret, '1.0', this.callBackUrl, 'HMAC-SHA1');\n}\n\nTwitter.prototype.getOAuthRequestToken = function (next) {\n  this.oauth.getOAuthRequestToken(function (error, oauth_token, oauth_token_secret, results) {\n    if (error) {\n      console.log('ERROR: ' + error);\n      next();\n    } else {\n      var oauth = {};\n      oauth.token = oauth_token;\n      oauth.token_secret = oauth_token_secret;\n      console.log('oauth.token: ' + oauth.token);\n      console.log('oauth.token_secret: ' + oauth.token_secret);\n      next(oauth);\n    }\n  });\n};\n\nTwitter.prototype.getOAuthAccessToken = function (oauth, next) {\n  this.oauth.getOAuthAccessToken(oauth.token, oauth.token_secret, oauth.verifier, function (error, oauth_access_token, oauth_access_token_secret, results) {\n    if (error) {\n      console.log('ERROR: ' + error);\n      next();\n    } else {\n      oauth.access_token = oauth_access_token;\n      oauth.access_token_secret = oauth_access_token_secret;\n      console.log('oauth.token: ' + oauth.token);\n      console.log('oauth.token_secret: ' + oauth.token_secret);\n      console.log('oauth.access_token: ' + access_token.token);\n      console.log('oauth.access_token_secret: ' + oauth.access_token_secret);\n      next(oauth);\n    }\n  });\n};\n\nTwitter.prototype.postMedia = function (params, error, success) {\n  var url = 'https://upload.twitter.com/1.1/media/upload.json';\n  this.doPost(url, params, error, success);\n};\n\nTwitter.prototype.postTweet = function (params, error, success) {\n  var path = '/statuses/update.json';\n  var url = this.baseUrl + path;\n  this.doPost(url, params, error, success);\n};\n\nTwitter.prototype.postCreateFriendship = function (params, error, success) {\n  var path = '/friendships/create.json';\n  var url = this.baseUrl + path;\n  this.doPost(url, params, error, success);\n};\n\nTwitter.prototype.getUserTimeline = function (params, error, success) {\n  var path = '/statuses/user_timeline.json' + this.buildQS(params);\n  var url = this.baseUrl + path;\n  this.doRequest(url, error, success);\n};\n\nTwitter.prototype.getMentionsTimeline = function (params, error, success) {\n  var path = '/statuses/mentions_timeline.json' + this.buildQS(params);\n  var url = this.baseUrl + path;\n  this.doRequest(url, error, success);\n};\n\nTwitter.prototype.getHomeTimeline = function (params, error, success) {\n  var path = '/statuses/home_timeline.json' + this.buildQS(params);\n  var url = this.baseUrl + path;\n  this.doRequest(url, error, success);\n};\n\nTwitter.prototype.getReTweetsOfMe = function (params, error, success) {\n  var path = '/statuses/retweets_of_me.json' + this.buildQS(params);\n  var url = this.baseUrl + path;\n  this.doRequest(url, error, success);\n};\n\nTwitter.prototype.getTweet = function (params, error, success) {\n  var path = '/statuses/show.json' + this.buildQS(params);\n  var url = this.baseUrl + path;\n  this.doRequest(url, error, success);\n};\n\nTwitter.prototype.getSearch = function (params, error, success) {\n  var encodedQuery = encodeURIComponent(params.q);\n  delete params.q;\n  var path = '/search/tweets.json?q=' + encodedQuery + '&' + qs.stringify(params);\n  var url = this.baseUrl + path;\n  this.doRequest(url, error, success);\n}; //molina code\n\n\nTwitter.prototype.getUser = function (params, error, success) {\n  var path = '/users/show.json' + this.buildQS(params);\n  var url = this.baseUrl + path;\n  this.doRequest(url, error, success);\n};\n\nTwitter.prototype.getFollowersList = function (params, error, success) {\n  var path = '/followers/list.json' + this.buildQS(params);\n  var url = this.baseUrl + path;\n  this.doRequest(url, error, success);\n};\n\nTwitter.prototype.getFollowersIds = function (params, error, success) {\n  var path = '/followers/ids.json' + this.buildQS(params);\n  var url = this.baseUrl + path;\n  this.doRequest(url, error, success);\n};\n\nTwitter.prototype.getCustomApiCall = function (url, params, error, success) {\n  var path = url + this.buildQS(params);\n  var url = this.baseUrl + path;\n  this.doRequest(url, error, success);\n};\n\nTwitter.prototype.postCustomApiCall = function (url, params, error, success) {\n  var path = url + this.buildQS(params);\n  var url = this.baseUrl + path;\n  this.doPost(url, params, error, success);\n};\n\nTwitter.prototype.doRequest = function (url, error, success) {\n  // Fix the mismatch between OAuth's  RFC3986's and Javascript's beliefs in what is right and wrong ;)\n  // From https://github.com/ttezel/twit/blob/master/lib/oarequest.js\n  url = url.replace(/\\!/g, \"%21\").replace(/\\'/g, \"%27\").replace(/\\(/g, \"%28\").replace(/\\)/g, \"%29\").replace(/\\*/g, \"%2A\");\n  this.oauth.get(url, this.accessToken, this.accessTokenSecret, function (err, body, response) {\n    console.log('URL [%s]', url);\n\n    if (!err && response.statusCode == 200) {\n      success(body);\n    } else {\n      error(err, response, body);\n    }\n  });\n};\n\nTwitter.prototype.doPost = function (url, post_body, error, success) {\n  // Fix the mismatch between OAuth's  RFC3986's and Javascript's beliefs in what is right and wrong ;)\n  // From https://github.com/ttezel/twit/blob/master/lib/oarequest.js\n  url = url.replace(/\\!/g, \"%21\").replace(/\\'/g, \"%27\").replace(/\\(/g, \"%28\").replace(/\\)/g, \"%29\").replace(/\\*/g, \"%2A\"); //(url, oauth_token, oauth_token_secret, post_body, post_content_type, callback \n\n  this.oauth.post(url, this.accessToken, this.accessTokenSecret, post_body, \"application/x-www-form-urlencoded\", function (err, body, response) {\n    console.log('URL [%s]', url);\n\n    if (!err && response.statusCode == 200) {\n      success(body);\n    } else {\n      error(err, response, body);\n    }\n  });\n};\n\nTwitter.prototype.buildQS = function (params) {\n  if (params && Object.keys(params).length > 0) {\n    return '?' + qs.stringify(params);\n  }\n\n  return '';\n};\n\nif (!(typeof exports === 'undefined')) {\n  exports.Twitter = Twitter;\n}","map":null,"metadata":{},"sourceType":"script"}