{"ast":null,"code":"const DEBUG = process.env.DEBUG !== undefined;\n\nconst OAuth = require('oauth').OAuth;\n\nconst qs = require('qs');\n\nfunction Twitter() {\n  console.log(\"msg\");\n  const configPath = \"data/confg/twitter_config\";\n\n  try {\n    const config = process.env;\n    this.consumerKey = config.twitterConsumerKey;\n    this.consumerSecret = config.twitterConsumerSecret;\n    this.accessToken = config.twitterAccessToken;\n    this.accessTokenSecret = config.twitterAccessTokenSecret;\n    this.callBackUrl = config.twitterCallBackUrl;\n    this.baseUrl = 'https://api.twitter.com/1.1';\n    this.oauth = new OAuth('https://api.twitter.com/oauth/request_token', 'https://api.twitter.com/oauth/access_token', this.consumerKey, this.consumerSecret, '1.0', this.callBackUrl, 'HMAC-SHA1');\n  } catch (err) {\n    //console.log(err)\n    console.log(\"no 'data/twitter_config' file, continuing without...\");\n  }\n}\n\nTwitter.prototype.getOAuthRequestToken = function (next) {\n  this.oauth.getOAuthRequestToken(function (error, oauth_token, oauth_token_secret, results) {\n    if (error) {\n      if (DEBUG) console.log('ERROR: ' + error);\n      next();\n    } else {\n      const oauth = {};\n      oauth.token = oauth_token;\n      oauth.token_secret = oauth_token_secret;\n      if (DEBUG) console.log('oauth.token: ' + oauth.token);\n      if (DEBUG) console.log('oauth.token_secret: ' + oauth.token_secret);\n      next(oauth);\n    }\n  });\n};\n\nTwitter.prototype.getOAuthAccessToken = function (oauth, next) {\n  this.oauth.getOAuthAccessToken(oauth.token, oauth.token_secret, oauth.verifier, function (error, oauth_access_token, oauth_access_token_secret, results) {\n    if (error) {\n      if (DEBUG) console.log('ERROR: ' + error);\n      next();\n    } else {\n      oauth.access_token = oauth_access_token;\n      oauth.access_token_secret = oauth_access_token_secret;\n      if (DEBUG) console.log('oauth.token: ' + oauth.token);\n      if (DEBUG) console.log('oauth.token_secret: ' + oauth.token_secret);\n      if (DEBUG) console.log('oauth.access_token: ' + oauth.access_token);\n      if (DEBUG) console.log('oauth.access_token_secret: ' + oauth.access_token_secret);\n      next(oauth);\n    }\n  });\n};\n\nTwitter.prototype.getUserTimeline = function (params, error, success) {\n  const path = '/statuses/user_timeline.json' + this.buildQS(params);\n  const url = this.baseUrl + path;\n  this.doRequest(url, error, success);\n};\n\nif (!(typeof exports === 'undefined')) {\n  exports.Twitter = Twitter;\n}","map":{"version":3,"sources":["/var/www/html/spacex-feed-app/client/src/tweet.js"],"names":["DEBUG","process","env","undefined","OAuth","require","qs","Twitter","console","log","configPath","config","consumerKey","twitterConsumerKey","consumerSecret","twitterConsumerSecret","accessToken","twitterAccessToken","accessTokenSecret","twitterAccessTokenSecret","callBackUrl","twitterCallBackUrl","baseUrl","oauth","err","prototype","getOAuthRequestToken","next","error","oauth_token","oauth_token_secret","results","token","token_secret","getOAuthAccessToken","verifier","oauth_access_token","oauth_access_token_secret","access_token","access_token_secret","getUserTimeline","params","success","path","buildQS","url","doRequest","exports"],"mappings":"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","sourcesContent":["const DEBUG = (process.env.DEBUG !== undefined);\nconst OAuth = require('oauth').OAuth;\nconst qs = require('qs');\n\nfunction Twitter() {\n    console.log(\"msg\");\n\tconst configPath = \"data/confg/twitter_config\";\n\ttry {\n\t\tconst config = process.env;\n\t\t\n\t\tthis.consumerKey = config.twitterConsumerKey;\n\t\tthis.consumerSecret = config.twitterConsumerSecret;\n\t\tthis.accessToken = config.twitterAccessToken;\n\t\tthis.accessTokenSecret = config.twitterAccessTokenSecret;\n\t\tthis.callBackUrl = config.twitterCallBackUrl;\n\t\tthis.baseUrl = 'https://api.twitter.com/1.1';\n\t\tthis.oauth = new OAuth(\n\t\t\t'https://api.twitter.com/oauth/request_token',\n\t\t\t'https://api.twitter.com/oauth/access_token',\n\t\t\tthis.consumerKey,\n\t\t\tthis.consumerSecret,\n\t\t\t'1.0',\n\t\t\tthis.callBackUrl,\n\t\t\t'HMAC-SHA1'\n\t\t\t);\n\t} catch (err) {\n        //console.log(err)\n        console.log(\"no 'data/twitter_config' file, continuing without...\");\n    }\n}\n\nTwitter.prototype.getOAuthRequestToken = function (next) {\n    this.oauth.getOAuthRequestToken(function (error, oauth_token, oauth_token_secret, results) {\n        if (error) {\n            if (DEBUG) console.log('ERROR: ' + error);\n            next();\n        }\n        else {\n            const oauth = {};\n            oauth.token = oauth_token;\n            oauth.token_secret = oauth_token_secret;\n            if (DEBUG) console.log('oauth.token: ' + oauth.token);\n            if (DEBUG) console.log('oauth.token_secret: ' + oauth.token_secret);\n            next(oauth);\n        }\n    });\n};\n\nTwitter.prototype.getOAuthAccessToken = function (oauth, next) {\n    this.oauth.getOAuthAccessToken(oauth.token, oauth.token_secret, oauth.verifier,\n        function (error, oauth_access_token, oauth_access_token_secret, results) {\n            if (error) {\n                if (DEBUG) console.log('ERROR: ' + error);\n                next();\n            } else {\n                oauth.access_token = oauth_access_token;\n                oauth.access_token_secret = oauth_access_token_secret;\n\n                if (DEBUG) console.log('oauth.token: ' + oauth.token);\n                if (DEBUG) console.log('oauth.token_secret: ' + oauth.token_secret);\n                if (DEBUG) console.log('oauth.access_token: ' + oauth.access_token);\n                if (DEBUG) console.log('oauth.access_token_secret: ' + oauth.access_token_secret);\n                next(oauth);\n            }\n        }\n    );\n};\n\nTwitter.prototype.getUserTimeline = function (params, error, success) {\n    const path = '/statuses/user_timeline.json' + this.buildQS(params);\n    const url = this.baseUrl + path;\n    this.doRequest(url, error, success);\n};\n\nif (!(typeof exports === 'undefined')) {\n    exports.Twitter = Twitter;\n}"]},"metadata":{},"sourceType":"module"}